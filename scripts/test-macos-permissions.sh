#!/bin/bash

# üçé Script de Teste R√°pido - Permiss√µes do macOS
# Este script verifica rapidamente o status das permiss√µes do aplicativo no macOS

echo "üîç Verificando permiss√µes do macOS..."
echo "======================================="

# Configura√ß√£o
APP_BUNDLE_ID="com.videorecorder.app"
APP_NAME="VideoRecorder"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üì± Aplicativo: ${APP_NAME}${NC}"
echo -e "${BLUE}üì¶ Bundle ID: ${APP_BUNDLE_ID}${NC}"
echo ""

# Verificar se o tccutil est√° dispon√≠vel
if ! command -v tccutil &> /dev/null; then
    echo -e "${RED}‚ùå tccutil n√£o encontrado${NC}"
    echo "Este script requer macOS 10.14 ou superior"
    exit 1
fi

# Verificar vers√£o do macOS
echo -e "${BLUE}üçé Vers√£o do macOS:${NC}"
sw_vers -productName && sw_vers -productVersion
echo ""

# Verificar permiss√µes atuais
echo -e "${BLUE}üîê Status das Permiss√µes:${NC}"
echo "========================="

# Fun√ß√£o para verificar permiss√£o espec√≠fica
check_permission() {
    local service=$1
    local name=$2
    
    # Verificar se o app est√° na lista de permiss√µes
    if tccutil list | grep -q "${APP_BUNDLE_ID}.*${service}"; then
        echo -e "${GREEN}‚úÖ ${name}: Listado nas permiss√µes${NC}"
    else
        echo -e "${RED}‚ùå ${name}: N√£o encontrado nas permiss√µes${NC}"
    fi
}

# Verificar cada permiss√£o
check_permission "kTCCServiceCamera" "C√¢mera"
check_permission "kTCCServiceMicrophone" "Microfone"
check_permission "kTCCServiceScreenCapture" "Captura de Tela"

echo ""

# Verificar se o aplicativo est√° instalado
echo -e "${BLUE}üì¶ Verificando Instala√ß√£o:${NC}"
if [ -d "/Applications/${APP_NAME}.app" ]; then
    echo -e "${GREEN}‚úÖ Aplicativo encontrado em /Applications/${NC}"
    
    # Verificar Info.plist
    INFO_PLIST="/Applications/${APP_NAME}.app/Contents/Info.plist"
    if [ -f "$INFO_PLIST" ]; then
        echo -e "${GREEN}‚úÖ Info.plist encontrado${NC}"
        
        # Verificar se as chaves de permiss√£o est√£o presentes
        if plutil -p "$INFO_PLIST" | grep -q "NSCameraUsageDescription"; then
            echo -e "${GREEN}‚úÖ NSCameraUsageDescription presente${NC}"
        else
            echo -e "${RED}‚ùå NSCameraUsageDescription ausente${NC}"
        fi
        
        if plutil -p "$INFO_PLIST" | grep -q "NSMicrophoneUsageDescription"; then
            echo -e "${GREEN}‚úÖ NSMicrophoneUsageDescription presente${NC}"
        else
            echo -e "${RED}‚ùå NSMicrophoneUsageDescription ausente${NC}"
        fi
        
        if plutil -p "$INFO_PLIST" | grep -q "NSScreenCaptureDescription"; then
            echo -e "${GREEN}‚úÖ NSScreenCaptureDescription presente${NC}"
        else
            echo -e "${RED}‚ùå NSScreenCaptureDescription ausente${NC}"
        fi
    else
        echo -e "${RED}‚ùå Info.plist n√£o encontrado${NC}"
    fi
    
    # Verificar assinatura de c√≥digo
    echo ""
    echo -e "${BLUE}üîè Verificando Assinatura:${NC}"
    if codesign -dv "/Applications/${APP_NAME}.app" 2>&1 | grep -q "not signed"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Aplicativo n√£o assinado${NC}"
    else
        echo -e "${GREEN}‚úÖ Aplicativo assinado${NC}"
    fi
else
    echo -e "${RED}‚ùå Aplicativo n√£o encontrado em /Applications/${NC}"
fi

echo ""

# Verificar logs de produ√ß√£o
echo -e "${BLUE}üìã Verificando Logs:${NC}"
LOG_DIR="$HOME/Library/Application Support/${APP_NAME}/logs"
if [ -d "$LOG_DIR" ]; then
    echo -e "${GREEN}‚úÖ Diret√≥rio de logs encontrado${NC}"
    
    # Mostrar logs mais recentes
    LATEST_LOG=$(ls -t "$LOG_DIR"/*.log 2>/dev/null | head -1)
    if [ -n "$LATEST_LOG" ]; then
        echo -e "${GREEN}‚úÖ Log mais recente: $(basename "$LATEST_LOG")${NC}"
        echo -e "${BLUE}üìÑ √öltimas 5 linhas do log:${NC}"
        tail -5 "$LATEST_LOG" | while read line; do
            echo "   $line"
        done
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Nenhum arquivo de log encontrado${NC}"
    fi
else
    echo -e "${RED}‚ùå Diret√≥rio de logs n√£o encontrado${NC}"
fi

echo ""

# Sugest√µes de a√ß√£o
echo -e "${BLUE}üîß Sugest√µes de A√ß√£o:${NC}"
echo "====================="

# Se h√° problemas, sugerir solu√ß√µes
if tccutil list | grep -q "${APP_BUNDLE_ID}"; then
    echo -e "${GREEN}‚úÖ Aplicativo est√° nas permiss√µes do sistema${NC}"
    echo "   ‚Ä¢ Execute o aplicativo para verificar funcionalidade"
    echo "   ‚Ä¢ Use o diagn√≥stico integrado no aplicativo"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aplicativo n√£o est√° nas permiss√µes do sistema${NC}"
    echo "   ‚Ä¢ Execute o aplicativo para solicitar permiss√µes"
    echo "   ‚Ä¢ Verifique se os di√°logos de permiss√£o aparecem"
    echo "   ‚Ä¢ Use o reset de permiss√µes se necess√°rio"
fi

echo ""

# Comandos √∫teis
echo -e "${BLUE}üõ†Ô∏è  Comandos √öteis:${NC}"
echo "=================="
echo "‚Ä¢ Reset de permiss√µes:"
echo "  tccutil reset Camera ${APP_BUNDLE_ID}"
echo "  tccutil reset Microphone ${APP_BUNDLE_ID}"
echo "  tccutil reset ScreenCapture ${APP_BUNDLE_ID}"
echo ""
echo "‚Ä¢ Abrir Prefer√™ncias do Sistema:"
echo "  open 'x-apple.systempreferences:com.apple.preference.security?Privacy_Camera'"
echo "  open 'x-apple.systempreferences:com.apple.preference.security?Privacy_Microphone'"
echo "  open 'x-apple.systempreferences:com.apple.preference.security?Privacy_ScreenCapture'"
echo ""
echo "‚Ä¢ Verificar Info.plist:"
echo "  plutil -p '/Applications/${APP_NAME}.app/Contents/Info.plist' | grep -E '(NSCamera|NSMicrophone|NSScreen)'"
echo ""
echo "‚Ä¢ Verificar assinatura:"
echo "  codesign -dv '/Applications/${APP_NAME}.app'"

echo ""
echo -e "${GREEN}‚úÖ Verifica√ß√£o conclu√≠da!${NC}"
echo "Use o diagn√≥stico integrado no aplicativo para an√°lise mais detalhada." 